"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeWebview = require("react-native-webview");
var _Loading = _interopRequireDefault(require("../Loading"));
var _ErrorOnParams = _interopRequireDefault(require("../ErrorOnParams"));
var _Validation = require("../../utils/Validation");
var _constants = require("../../constants");
var _styles = _interopRequireDefault(require("../../styles"));
var _IamportUrl = _interopRequireDefault(require("../../utils/IamportUrl"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Certification(_ref) {
  let {
    userCode,
    tierCode,
    data,
    loading,
    callback
  } = _ref;
  const [isWebViewLoaded, setIsWebViewLoaded] = (0, _react.useState)(false);
  const webview = /*#__PURE__*/(0, _react.createRef)();
  const validation = new _Validation.Validation(userCode, loading, callback, data);
  let redirectUrl = _constants.IMPConst.M_REDIRECT_URL;
  if (data.m_redirect_url !== undefined && data.m_redirect_url.trim() !== '') {
    redirectUrl = data.m_redirect_url;
  } else {
    data.m_redirect_url = redirectUrl;
  }
  if (validation.getIsValid()) {
    const {
      loadingContainer,
      webViewContainer
    } = _styles.default;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNativeWebview.WebView, {
      containerStyle: webViewContainer,
      ref: webview,
      source: {
        html: _constants.IMPConst.WEBVIEW_SOURCE_HTML
      },
      mixedContentMode: 'always',
      onLoadEnd: () => {
        if (!isWebViewLoaded) {
          var _webview$current3;
          // html이 load되고 최초 한번만 inject javascript
          if (tierCode) {
            var _webview$current;
            (_webview$current = webview.current) === null || _webview$current === void 0 || _webview$current.injectJavaScript(`
          setTimeout(function() { IMP.agency("${userCode}", "${tierCode}"); });
        `);
          } else {
            var _webview$current2;
            (_webview$current2 = webview.current) === null || _webview$current2 === void 0 || _webview$current2.injectJavaScript(`
          setTimeout(function() { IMP.init("${userCode}"); });
        `);
          }
          (_webview$current3 = webview.current) === null || _webview$current3 === void 0 || _webview$current3.injectJavaScript(`
          setTimeout(function() {
            IMP.certification(${JSON.stringify(data)}, function(response) {
              window.ReactNativeWebView.postMessage(JSON.stringify(response));
            });
          });
        `);
          setIsWebViewLoaded(true);
        }
      },
      onMessage: e => {
        let data = e.nativeEvent.data;
        if (decodeURIComponent(data) !== data) {
          data = decodeURIComponent(data);
        }
        let response = JSON.parse(data);
        if (typeof callback === 'function') {
          callback(response);
        }
      },
      startInLoadingState: true,
      renderLoading: () => /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: loadingContainer
      }, loading || /*#__PURE__*/_react.default.createElement(_Loading.default, null)),
      originWhitelist: ['*'] // https://github.com/facebook/react-native/issues/19986
      ,
      onShouldStartLoadWithRequest: request => {
        const {
          url
        } = request;
        // console.log('url: ' + url);
        const iamportUrl = new _IamportUrl.default(url);
        if (iamportUrl.isAppUrl()) {
          /* 3rd-party 앱 오픈 */
          iamportUrl.launchApp().catch(e => {
            const {
              code,
              message
            } = e;
            callback({
              imp_success: false,
              error_code: code,
              error_msg: message
            });
          });
          return false;
        }
        if (iamportUrl.isPaymentOver(redirectUrl)) {
          callback(iamportUrl.getQuery());
          return false;
        }
        return true;
      }
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_ErrorOnParams.default, {
    message: validation.getMessage()
  });
}
var _default = Certification;
exports.default = _default;
//# sourceMappingURL=index.js.map