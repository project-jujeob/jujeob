plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

//compileJava {
//    options.compilerArgs += "-Xlint:deprecation"
//}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'

    // Database
    implementation 'mysql:mysql-connector-java:8.0.33'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // Log4j
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'

    // Jwt
    implementation 'com.auth0:java-jwt:4.2.1'

    // JWT for Security
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    //Oauth2.0
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // Spring Configuration Processor
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'io.projectreactor:reactor-test'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.data:spring-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    // Validation
    implementation 'jakarta.validation:jakarta.validation-api:3.0.1'
    implementation 'org.hibernate.validator:hibernate-validator:7.0.1.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'

    // Servlet
    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

    // Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
}




tasks.named('test') {
    useJUnitPlatform()

    // OpenJDK 64-Bit Server VM warning:
    // Sharing is only supported for boot loader classes because bootstrap classpath has been appended
    // 경고 방지
    jvmArgs("-Xshare:off")
}

// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}